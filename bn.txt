<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Daily Practice Problems</title>
  <style>
    body { font-family: sans-serif; padding: 2rem; max-width: 800px; margin: auto; }
    .subject { margin-top: 2rem; }
    .problem { padding: 0.5rem; margin: 0.5rem 0; border-left: 4px solid #ccc; }
    img { max-width: 100%; height: auto; display: block; margin-top: 0.5rem; }
    .index { font-weight: bold; margin-right: 0.5rem; }
    .topic { font-style: italic; color: #555; }
  </style>
</head>
<body>
  <h1>Daily Practice Problems</h1>
  <input type="file" id="configFile" accept="application/json" />
  <div id="status">Load your <code>config.json</code> file.</div>
  <div id="problems"></div>

  <script>
    function getTodayKey() {
      const today = new Date();
      return `practice-${today.getFullYear()}-${today.getMonth()+1}-${today.getDate()}`;
    }

    document.getElementById('configFile').addEventListener('change', async function () {
      const file = this.files[0];
      if (!file) return;

      const configText = await file.text();
      const config = JSON.parse(configText);
      const todayKey = getTodayKey();

      let stored = localStorage.getItem(todayKey);
      if (stored) {
        stored = JSON.parse(stored);
        renderProblems(stored);
        document.getElementById('status').textContent = "Loaded from saved data.";
        return;
      }

      const problemData = {};
      for (const [subject, subjectConfig] of Object.entries(config)) {
        const text = await fetch(subjectConfig.file).then(res => res.text());
        const lines = text.split(/\r?\n/).filter(line => line.trim() !== '');

        const parsed = lines.map(line => {
          const match = line.match(/^\[(\d+)]\s*\[(.*?)\]\s*(.+)$/);
          if (!match) return null;
          const [_, index, topic, content] = match;
          return { index: parseInt(index), topic, content };
        }).filter(p => p);

        problemData[subject] = [];
        for (const [topic, count] of Object.entries(subjectConfig.topics)) {
          const pool = parsed.filter(p => p.topic === topic);
          const chosen = [];
          while (chosen.length < count && pool.length > 0) {
            const i = Math.floor(Math.random() * pool.length);
            chosen.push(pool.splice(i, 1)[0]);
          }
          problemData[subject].push(...chosen);
        }
      }

      localStorage.setItem(todayKey, JSON.stringify(problemData));
      renderProblems(problemData);
      document.getElementById('status').textContent = "Today's problems loaded.";
    });

    function renderProblems(data) {
      const container = document.getElementById('problems');
      container.innerHTML = '';
      for (const [subject, problems] of Object.entries(data)) {
        const section = document.createElement('div');
        section.className = 'subject';
        section.innerHTML = `<h2>${subject}</h2>`;

        problems.forEach(p => {
          const div = document.createElement('div');
          div.className = 'problem';
          const isImage = p.content.startsWith('img:');
          const body = isImage ? `<img src="problems/${p.content.slice(4).trim()}" />` : p.content;
          div.innerHTML = `<span class="index">#${p.index}</span> <span class="topic">[${p.topic}]</span><br>${body}`;
          section.appendChild(div);
        });

        container.appendChild(section);
      }
    }
  </script>
</body>
</html>
